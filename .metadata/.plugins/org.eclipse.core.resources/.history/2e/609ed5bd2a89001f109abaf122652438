package pe.com.cibertec.LP2_T2_RamirezEsparronMauricio.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import pe.com.cibertec.LP2_T2_RamirezEsparronMauricio.model.entity.EmpleadoEntity;
import pe.com.cibertec.LP2_T2_RamirezEsparronMauricio.repository.EmpleadoRepository;
import pe.com.cibertec.LP2_T2_RamirezEsparronMauricio.service.EmpleadosService;
import pe.com.cibertec.LP2_T2_RamirezEsparronMauricio.service.AreaService;

import java.util.List;
import java.util.Optional;

@Service
public class EmpleadoServiceImpl implements EmpleadosService {

    @Autowired
    private EmpleadoRepository empleadoRepository;

    @Autowired
    private AreaService areaService;

    @Override
    public List<EmpleadoEntity> buscarEmpleados() {
        return empleadoRepository.findAll();
    }

    @Override
    public void crearEmpleado(EmpleadoEntity empleado) {
        empleadoRepository.save(empleado);
    }


	@Override
	public EmpleadoEntity buscarEmpleadoPorDni(String dni) {
        Optional<EmpleadoEntity> empleado = empleadoRepository.findById(dni);
        if (empleado.isPresent()) {
            return empleado.get();
        } else {
            throw new RuntimeException("Empleado no encontrado");
        }
    }

	@Override
	public List<EmpleadoEntity> buscarEmpleadosPorArea(Integer areaId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void actualizarEmpleado(String dni, EmpleadoEntity empleadoActualizado) {
		 EmpleadoEntity empleadoEncontrado = buscarEmpleadoPorDni(dni);
	        if (empleadoEncontrado == null) {
	            throw new RuntimeException("Empleado no encontrado");
	        }

	        try {
	            empleadoEncontrado.setDniEmpleado(empleadoActualizado.getDniEmpleado());
	            empleadoEncontrado.setNombreEmpleado(empleadoActualizado.getNombreEmpleado());
	            empleadoEncontrado.setApellidoEmpleado(empleadoActualizado.getApellidoEmpleado());
	            empleadoEncontrado.setCorreo(empleadoActualizado.getCorreo());
	            empleadoEncontrado.setDireccion(empleadoActualizado.getDireccion());
	            empleadoEncontrado.setFechaNacimiento(empleadoActualizado.getFechaNacimiento());
	            
	            empleadoRepository.save(empleadoEncontrado); // Guarda el empleado actualizado
	        } catch (Exception e) {
	            throw new RuntimeException("Error al actualizar el empleado", e);
	        }
	    }
	}

	@Override
	public void eliminarEmpleado(String dni) {
	EmpleadoEntity empleadoEncontrado = buscarEmpleadoPorDni(dni);
        if (empleadoEncontrado == null) {
            throw new RuntimeException("Empleado no encontrado");
        }
        empleadoRepository.delete(empleadoEncontrado);
	}

	@Override
	public List<EmpleadoEntity> buscarEmpleadosPorNombre(String nombre) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<EmpleadoEntity> buscarEmpleadosPorApellido(String apellido) {
		// TODO Auto-generated method stub
		return null;
	}
}
